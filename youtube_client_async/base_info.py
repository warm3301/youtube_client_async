from typing import Optional

from . import helpers, innertube, net, thumbnail, video


class VideoInfo:
    """VideoInfo contains a limited number of properties and capabilities
    than the full-size youtube_client_async.video.Video object.
    These properties are generated by youtube, for example,
    when iterate videos on a channel."""

    def __init__(self, raw, net_obj: net.SessionRequest, it: innertube.InnerTube):
        self.net_obj: net.SessionRequest = net_obj
        self.it: innertube.InnerTube = it
        self.video_id: str = raw["videoId"]
        self.url: str = (
            "https://youtube.com"
            + raw["navigationEndpoint"]["commandMetadata"]["webCommandMetadata"]["url"]
        )
        self.title: str = helpers.get_text_by_runs(raw["title"])
        self.label: str = raw["title"]["accessibility"]["accessibilityData"]["label"]

        self.thumbnails: thumbnail.ThumbnailQuery = thumbnail.ThumbnailQuery(
            raw["thumbnail"]["thumbnails"], self.net_obj
        )

        self.description_snippet: Optional[str] = None
        if "descriptionSnippet" in raw:
            self.description_snippet = helpers.get_text_by_runs(raw["descriptionSnippet"])
        self.published_time: str = raw["publishedTimeText"]["simpleText"]
        self.lenght: str = raw["lengthText"]["simpleText"]

        self.lenght_accessibility: str = raw["lengthText"]["accessibility"][
            "accessibilityData"]["label"]

        self.view_count: str = raw["viewCountText"]["simpleText"]
        self.view_count_short: str = raw["shortViewCountText"]["simpleText"]
        self.view_count_short_accessibility = raw["shortViewCountText"][
            "accessibility"]["accessibilityData"]["label"]

        self.is_vereficated: bool = helpers.is_vereficated(raw)

    def __repr__(self) -> str:
        return (f"<youtube_client_async.base_info.VideoInfo"
                f" id=\"{self.video_id}\""
                f' title=\"{self.title}\" >')

    async def get_video_obj(self) -> video.Video:
        """Gets a full-fledged object.
        Formally, this is a click on a link when,
        for example, a video is iterated on a channel"""

        return await video.get_video(self.url, self.net_obj, self.it)
